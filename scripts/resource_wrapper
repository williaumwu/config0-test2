#!/usr/bin/env python

"""
Terraform Execution Wrapper for Config0

This module provides a wrapper around Terraform operations, executing them through
AWS Lambda or CodeBuild. It handles configuration management, environment variable setup,
state file management, and command execution for Terraform operations like create,
destroy, validate, and check.

The module uses Config0's resource management system to handle inputs, manage state,
and coordinate execution across AWS services.
"""

# Copyright 2025 Gary Leong gary@config0.com
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import os

from config0_publisher.loggerly import Config0Logger
from config0_publisher.resource.manage import ResourceCmdHelper
from config0_publisher.resource.config0_settings_env_vars import Config0SettingsEnvVarHelper
from config0_publisher.resource.tf_vars import tf_iter_to_str, get_tf_bool
from config0_publisher.resource.codebuild import Codebuild
from config0_publisher.resource.lambdabuild import Lambdabuild
from config0_publisher.resource.tf_configure import ConfigureTFConfig0Db
from config0_publisher.serialization import b64_decode


class TFExecShellHelper(ResourceCmdHelper, Config0SettingsEnvVarHelper, ConfigureTFConfig0Db):
    """Helper class for executing Terraform commands via AWS Lambda or CodeBuild"""

    def __init__(self):
        self.classname = 'TerraformWrapper'
        self.logger = Config0Logger(self.classname, logcategory="cloudprovider")
        self.logger.debug(f"Instantiating {self.classname}")
        self.method = os.environ.get("METHOD", "create")

        ConfigureTFConfig0Db.__init__(self)

        # Main input settings from environment var CONFIG0_RESOURCE_EXEC_SETTINGS_HASH
        Config0SettingsEnvVarHelper.__init__(self)
        self.eval_config0_resource_settings(self.method)

        set_must_exists = [
            "tmp_bucket",
            "log_bucket"
        ]

        set_default_values = {
            "failed_destroy": None,
            "create_remote_state": None,
            "tf_runtime_env_vars": None,
            "ssm_name": None
        }

        if self.method == "create":
            set_must_exists.extend([
                "ssm_name",
                "stateful_id", 
                "remote_stateful_bucket"
            ])
            set_default_values["create_remote_state"] = True

        ResourceCmdHelper.__init__(
            self,
            main_env_var_key="TF_RUNTIME_SETTINGS",
            app_name="terraform",
            set_must_exists=set_must_exists,
            set_default_values=set_default_values
        )

        self._apply_tf_runtime_env_vars()
        self.terraform_tfvars = os.path.join(self.exec_dir, "terraform.tfvars")

    def _set_runtime_env_vars(self, method="create"):
        """Sets runtime environment variables needed for Terraform execution"""
        
        # Build environment variables only needed when initially creating
        if method != "create":
            return

        try:
            exclude_vars = list(self.tf_configs["tf_vars"].keys())
        except (KeyError, AttributeError) as e:
            exclude_vars = self.exclude_tfvars

        # Insert TF_VAR_* os vars
        self.insert_os_env_prefix_envs(self.build_env_vars, exclude_vars)

        # Set environment variables for Terraform execution
        self.build_env_vars["BUILD_TIMEOUT"] = self.build_timeout

        if self.docker_image:
            self.build_env_vars["DOCKER_IMAGE"] = self.docker_image

        if self.runtime_env_vars:
            self.build_env_vars.update(self.runtime_env_vars)

        self.build_env_vars["TF_RUNTIME"] = self.tf_runtime
        self.build_env_vars["SHARE_DIR"] = self.share_dir
        self.build_env_vars["RUN_SHARE_DIR"] = self.run_share_dir
        self.build_env_vars["LOG_BUCKET"] = self.log_bucket
        self.build_env_vars["TMP_BUCKET"] = self.tmp_bucket
        self.build_env_vars["STATEFUL_ID"] = self.stateful_id
        self.build_env_vars["APP_DIR"] = self.app_dir
        self.build_env_vars["APP_NAME"] = self.app_name
        self.build_env_vars["REMOTE_STATEFUL_BUCKET"] = self.remote_stateful_bucket
        self.build_env_vars["TMPDIR"] = "/tmp"

        # SSM name setting
        if self.build_env_vars.get("SSM_NAME"):  # usually set in create
            self.ssm_name = self.build_env_vars["SSM_NAME"]
        elif os.environ.get("SSM_NAME"):
            self.ssm_name = os.environ["SSM_NAME"]
            self.build_env_vars["SSM_NAME"] = self.ssm_name

    def _create_terraform_tfvars(self):
        """Creates terraform.tfvars file from TF_VAR_* variables"""

        if self.tf_configs and self.tf_configs.get("tf_vars"):
            _tfvars = self.tf_configs["tf_vars"]
        else:
            _tfvars = self.get_os_env_prefix_envs()

        if not _tfvars:
            return

        with open(self.terraform_tfvars, "w") as f:
            for _key, _input in _tfvars.items():
                _type = _input["type"]
                _value = _input["value"]
                _quoted = True

                if _type in ["dict", "list"]:
                    _value = tf_iter_to_str(_value)
                    _quoted = None
                elif _type == "bool":
                    _value = get_tf_bool(_value)
                    _quoted = None
                elif _type in ["float", "int"]:
                    _quoted = None

                self.logger.debug(f"_create_terraform_tfvars (new_format): {_key} -> <{_type}> {_value}")

                _entry = f'{_key} \t= "{_value}"' if _quoted else f'{_key} \t= {_value}'
                f.write(f"{_entry}\n")

        self.logger.debug("*" * 32)
        self.logger.debug(f"\nWrote terraform.tfvars: {self.terraform_tfvars}\n")
        self.logger.debug("*" * 32)

        return _tfvars.keys()

    def _get_aws_exec_cinputargs(self, method="create"):
        """Gets AWS execution input arguments"""

        cinputargs = {
            "method": method,
            "build_timeout": self.build_timeout,
            "run_share_dir": self.run_share_dir,
            "app_dir": self.app_dir,
            "remote_stateful_bucket": self.remote_stateful_bucket,
            "aws_region": self.aws_region,
            "version": self.version,
            "binary": self.binary,
            "tf_runtime": self.tf_runtime
        }

        # Usually associated with create
        if method in ["apply", "create", "pre-create"]:
            if self.build_env_vars:
                cinputargs["build_env_vars"] = self.build_env_vars
            if self.ssm_name:
                cinputargs["ssm_name"] = self.ssm_name
        # Usually associated with destroy/validate/check
        elif os.environ.get("CONFIG0_BUILD_ENV_VARS"):
            cinputargs["build_env_vars"] = b64_decode(os.environ["CONFIG0_BUILD_ENV_VARS"])

        return cinputargs

    def _set_build_method(self):
        """Determines whether to use CodeBuild or Lambda for execution"""

        if os.environ.get("USE_CODEBUILD"):  # longer than 900 seconds
            self.build_method = "codebuild"
        elif os.environ.get("USE_LAMBDA"):  # shorter than 900 seconds
            self.build_method = "lambda"
        elif self.method in ["validate", "check", "pre-create"]:
            self.build_method = "lambda"
        elif os.environ.get("USE_AWS", True):  # select codebuild or lambda
            if int(self.build_timeout) > 600:
                self.build_method = "codebuild"
            else:
                self.build_method = "lambda"
        else:  # the default
            self.build_method = "lambda"

    def create_aws_tf_backend(self):
        """Creates AWS Terraform backend configuration"""

        _file = os.path.join(
            self.run_share_dir,
            self.app_dir,
            "backend.tf"
        )

        contents = f"""terraform {{
  backend "s3" {{
    bucket = "{self.remote_stateful_bucket}"
    key    = "{self.stateful_id}/state/{self.stateful_id}.tfstate"
    region = "{self.aws_backend_region}"
  }}
}}
"""
        with open(_file, "w") as file:
            file.write(contents)

    def _setup_and_exec_in_aws(self, method, create_remote_state=None):
        """Sets up and executes Terraform in AWS"""

        self._set_runtime_env_vars(method=method)

        # Use backend to track state file
        if create_remote_state:
            self.create_aws_tf_backend()
        return self._exec_in_aws(method=method)

    def _exec_in_aws(self, method="create"):
        """Executes Terraform command in AWS"""

        cinputargs = self._get_aws_exec_cinputargs(method=method)
        _awsbuild_lambda = Lambdabuild(**cinputargs)

        if self.build_method == "lambda":
            _awsbuild = _awsbuild_lambda
        elif self.build_method == "codebuild":
            _awsbuild = Codebuild(**cinputargs)
        else:
            return False

        results = _awsbuild.run()

        if method == "destroy":
            try:
                os.chdir(self.cwd)
            except (FileNotFoundError, PermissionError) as e:
                os.chdir("/tmp")

        self.eval_failure(results, method)
        return results

    def _apply_tf_runtime_env_vars(self):
        """Applies Terraform runtime environment variables"""
        
        if hasattr(self, "tf_runtime_env_vars") and self.tf_runtime_env_vars:
            for _k, _v in self.tf_runtime_env_vars.items():
                self.runtime_env_vars[_k.upper()] = _v

    def create(self):
        """Creates Terraform resources"""

        if not self.stateful_id:
            self.logger.error("STATEFUL_ID needs to be set")

        # If we render template files, we don't create tfvars file
        if not self.templify(app_template_vars="TF_EXEC_TEMPLATE_VARS", **self.inputargs):
            self.exclude_tfvars = self._create_terraform_tfvars()

        if not os.path.exists(self.exec_dir):
            raise Exception(f"terraform directory must exist at {self.exec_dir} when creating tf")

        self._set_runtime_env_vars(method="create")
        self.create_aws_tf_backend()

        # Submit and run required env file
        self.create_build_envfile()

        if self.build_method == "codebuild":
            self.build_method = "lambda"  # we run pre-create in lambda first
            _use_codebuild = True
        else:
            _use_codebuild = None

        pre_creation = self._exec_in_aws(method="pre-create")
        if not pre_creation.get("status"):
            self.logger.error("pre-create failed")
            return pre_creation

        if _use_codebuild:
            self.build_method = "codebuild"

        tf_results = self._exec_in_aws(method="create")

        # Should never get this far if execution failed
        # because eval_failure should exit out
        if not tf_results.get("status"):
            return tf_results

        self.post_create()
        return tf_results

    def run(self):
        """Main execution method"""

        self._set_build_method()

        if self.method == "create":
            tf_results = self.create()
        elif self.method == "destroy":
            tf_results = self._setup_and_exec_in_aws("destroy")
        elif self.method == "validate":
            tf_results = self._setup_and_exec_in_aws("validate")
        elif self.method == "check":
            tf_results = self._setup_and_exec_in_aws("check")
        else:
            usage()
            print(f'Method "{self.method}" not supported!')
            exit(4)

        # Evaluation of log should be at the end
        # outside of _exec_in_aws
        self.eval_log(tf_results, local_log=True)


def usage():
    """Prints usage information"""
    print("""
script + environmental variables

basic:
    main environment variable
        CONFIG0_RESOURCE_SETTINGS - for creating - it is base64 encoded
        CONFIG0_BUILD_ENV_VARS - for destroying/validating - it is base64 encoded
        METHOD - This needs to be set
    """)


if __name__ == '__main__':
    main = TFExecShellHelper()
    main.run()







